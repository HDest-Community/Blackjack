version "4.0"

class BlackjackHandler : StaticEventHandler
{
	override void CheckReplacement(ReplaceEvent e)
	{
		if (!e.Replacement)
		{
			return;
		}

		switch (e.Replacement.GetClassName())
		{
			case 'ClipBoxPickup':
				if (random[bljackrand]() <= 8)
				{
					e.Replacement = "BlackjackRandom";
				}
				break;
			case 'ShellRandom':
				if (random[bljackrand]() <= 10)
				{
					e.Replacement = "HDBlackjackMagShells";
				}
				break;
			case 'ClipMagPickup':
				if (random[bljackrand]() <= 16)
				{
					e.Replacement = "HDBlackjackMag355";
				}
				break;
		}
	}

	override void WorldThingSpawned(WorldEvent e)
	{
		let BlackjackAmmo = HDRevolverAmmo(e.Thing);
		if (BlackjackAmmo && BlackjackAmmo.GetClassName() == 'HDRevolverAmmo')
		{
			BlackjackAmmo.ItemsThatUseThis.Push("HDBlackjack");
		}
	}
}

class HDBlackjack : HDWeapon
{
	enum BlackjackFlags
	{
		BJF_JustUnload = 1
	}

	enum BlackjackProperties
	{
		BJProp_Flags,
		BJProp_ChamberPrimary,
		BJProp_MagPrimary,
		BJProp_ChamberSecondary,
		BJProp_MagSecondary,
		BJProp_LoadType
	}

	override bool AddSpareWeapon(actor newowner) { return AddSpareWeaponRegular(newowner); }
	override HDWeapon GetSpareWeapon(actor newowner, bool reverse, bool doselect) { return GetSpareWeaponRegular(newowner, reverse, doselect); }
	override double GunMass()
	{
		return 10 + 0.04 * WeaponStatus[BJProp_MagPrimary] + 0.08 * WeaponStatus[BJProp_MagSecondary];
	}
	override double WeaponBulk()
	{
		double BaseBulk = 110;
		int MagPrim = WeaponStatus[BJProp_MagPrimary];
		int MagSec = WeaponStatus[BJProp_MagSecondary];
		if (MagPrim >= 0)
		{
			BaseBulk += HDBlackjackMag355.EncMagLoaded + MagPrim * ENC_355_LOADED;
		}
		if (MagSec >= 0)
		{
			BaseBulk += HDBlackjackMagShells.EncMagLoaded + MagSec * ENC_SHELLLOADED;
		}
		return BaseBulk;
	}
	override string, double GetPickupSprite()
	{
		string PrimMagFrame = WeaponStatus[BJProp_MagPrimary] == -1 ? "E" : "F";
		string SecMagFrame = WeaponStatus[BJProp_MagSecondary] == -1 ? "E" : "F";
		return "BJ"..PrimMagFrame..SecMagFrame.."A0", 0.4;
	}
	override void InitializeWepStats(bool idfa)
	{
		WeaponStatus[BJProp_ChamberPrimary] = 2;
		WeaponStatus[BJProp_MagPrimary] = HDBlackjackMag355.MagCapacity;
		WeaponStatus[BJProp_ChamberSecondary] = 2;
		WeaponStatus[BJProp_MagSecondary] = HDBlackjackMagShells.MagCapacity;
	}

	override string GetHelpText()
	{
		return WEPHELP_FIRESHOOT
		..WEPHELP_RELOAD.."  Reload rifle mag\n"
		..WEPHELP_ALTRELOAD.."  Reload shotgun mag\n"
		..WEPHELP_UNLOAD.. " Unload rifle mag\n"
		..WEPHELP_FIREMODE.."+"..WEPHELP_UNLOAD.. " Unload shotgun mag\n"
		..WEPHELP_USE.."+"..WEPHELP_RELOAD.."  Reload rifle chamber\n"
		..WEPHELP_USE.."+"..WEPHELP_ALTRELOAD.."  Reload shotgun chamber\n"
		..WEPHELP_MAGMANAGER;
	}

	override string PickupMessage()
	{
		return String.Format("You picked up the 'Blackjack' .355 carbine.");
	}

	override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl)
	{
		if (sb.HudLevel == 1)
		{
			int NextPrimaryMag = sb.GetNextLoadMag(HDMagAmmo(hpl.FindInventory("HDBlackjackMag355")));
			if (NextPrimaryMag >= HDBlackjackMag355.MagCapacity)
			{
				sb.DrawImage("BJM3A0", (-46, -3),sb. DI_SCREEN_CENTER_BOTTOM, scale: (2.0, 2.0));
			}
			else if (NextPrimaryMag <= 0)
			{
				sb.DrawImage("BJM3B0", (-46, -3), sb.DI_SCREEN_CENTER_BOTTOM, alpha: NextPrimaryMag ? 0.6 : 1.0, scale: (2.0, 2.0));
			}
			else
			{
				sb.DrawBar("BJM3NORM", "BJM3GREY", NextPrimaryMag, HDBlackjackMag355.MagCapacity, (-46, -3), -1, sb.SHADER_VERT, sb.DI_SCREEN_CENTER_BOTTOM);
			}
			sb.DrawNum(hpl.CountInv("HDBlackjackMag355"), -43, -8, sb.DI_SCREEN_CENTER_BOTTOM);

			int NextSecondaryMag = sb.GetNextLoadMag(HDMagAmmo(hpl.FindInventory("HDBlackjackMagShells")));
			if (NextSecondaryMag >= HDBlackjackMagShells.MagCapacity)
			{
				sb.DrawImage("BJMSA0", (-68, -3),sb. DI_SCREEN_CENTER_BOTTOM, scale: (2.0, 2.0));
			}
			else if (NextSecondaryMag <= 0)
			{
				sb.DrawImage("BJMSB0", (-68, -3), sb.DI_SCREEN_CENTER_BOTTOM, alpha: NextSecondaryMag ? 0.6 : 1.0, scale: (2.0, 2.0));
			}
			else
			{
				sb.DrawBar("BJMSNORM", "BJMSGREY", NextSecondaryMag, HDBlackjackMagShells.MagCapacity, (-68, -3), -1, sb.SHADER_VERT, sb.DI_SCREEN_CENTER_BOTTOM);
			}
			sb.DrawNum(hpl.CountInv("HDBlackjackMagShells"), -65, -8, sb.DI_SCREEN_CENTER_BOTTOM);
		}

		sb.DrawWepNum(hdw.WeaponStatus[BJProp_MagPrimary], HDBlackjackMag355.MagCapacity, posy: -12);
		if (hdw.WeaponStatus[BJProp_ChamberPrimary] == 2)
		{
			sb.DrawRect(-19, -16, 3, 1);
		}

		sb.DrawWepNum(hdw.WeaponStatus[BJProp_MagSecondary], HDBlackjackMagShells.MagCapacity, posy: -4);
		if (hdw.WeaponStatus[BJProp_ChamberSecondary] == 2)
		{
			sb.DrawRect(-24, -10, 5, 3);
			sb.DrawRect(-18, -10, 2, 3);
		}
		else if (hdw.WeaponStatus[BJProp_ChamberSecondary] == 1)
		{
			sb.DrawRect(-18, -10, 2, 3);
		}
	}

	override void DrawSightPicture(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl, bool sightbob, vector2 bob, double fov, bool scopeview, actor hpc, string whichdot)
	{
		int cx, cy, cw, ch;
		[cx, cy, cw, ch] = Screen.GetClipRect();
		sb.SetClipRect(-16 + bob.x, -4 + bob.y, 32, 16, sb.DI_SCREEN_CENTER);
		vector2 bob2 = bob * 2;
		bob2.y = clamp(bob2.y, -8, 8);
		sb.DrawImage("BJCKFRNT", bob2, sb.DI_SCREEN_CENTER | sb.DI_ITEM_TOP, alpha: 0.9, scale: (0.8, 0.6));
		sb.SetClipRect(cx, cy, cw, ch);
		sb.DrawImage("BJCKBACK", bob, sb.DI_SCREEN_CENTER | sb.DI_ITEM_TOP, scale: (0.9, 0.7));
	}

	override void DropOneAmmo(int amt)
	{
		if (owner)
		{
			double OldAngle = owner.angle;

			amt = clamp(amt, 1, 10);
			if (owner.CheckInventory("HDRevolverAmmo", 1))
			{
				owner.A_DropInventory("HDRevolverAmmo", amt * 15);
				owner.angle += 15;
			}
			else
			{
				owner.A_DropInventory("HDBlackjackMag355", amt);
				owner.angle += 15;
			}

			if (owner.CheckInventory("HDShellAmmo", 1))
			{
				owner.A_DropInventory("HDShellAmmo", amt * 15);
			}
			else
			{
				owner.A_DropInventory("HDBlackjackMagShells", amt);
			}

			owner.angle = OldAngle;
		}
	}

	Default
	{
		Weapon.SelectionOrder 300;
		Weapon.SlotNumber 4;
		Weapon.SlotPriority 1.5;
		HDWeapon.BarrelSize 20, 2, 3;
		Scale 0.24;
		Tag "Blackjack";
		HDWeapon.Refid "bjk";
	}

	States
	{
		RegisterSprites:
			BJFF A 0; BJFE A 0; BJEF A 0; BJEE A 0;

		Spawn:
			BJFF A 0 NoDelay
			{
				string PrimMagFrame = invoker.WeaponStatus[BJProp_MagPrimary] == -1 ? "E" : "F";
				string SecMagFrame = invoker.WeaponStatus[BJProp_MagSecondary] == -1 ? "E" : "F";
				sprite = GetSpriteIndex("BJ"..PrimMagFrame..SecMagFrame);
			}
		RealSpawn:
			#### A -1;
			Stop;
		Ready:
			BJKG A 1 A_WeaponReady(WRF_ALLOWRELOAD | WRF_ALLOWUSER3 | WRF_ALLOWUSER1 | WRF_ALLOWUSER4);
			Goto ReadyEnd;
		Select0:
			BJKG A 0;
			Goto Select0BFG;
		Deselect0:
			BJKG A 0;
			Goto Deselect0BFG;
		User3:
			BJKG A 0 A_MagManager("HDBlackjackMag");
			Goto Ready;

		Fire:
			BJKG A 1
			{
				if (invoker.WeaponStatus[BJProp_ChamberPrimary] < 2)
				{
					invoker.WeaponStatus[BJProp_LoadType] = 1;
					SetWeaponState("ChamberManual");
					return;
				}
				else
				{
					SetWeaponState("RealFire");
					return;
				}
			}
			Goto Nope;
		RealFire:
			BJKF A 1 Offset(0, 35)
			{
				HDBulletActor.FireBullet(self, "HDB_355", spread: 1.25, speedfactor: 1.15);
				A_AlertMonsters();
				invoker.WeaponStatus[BJProp_ChamberPrimary] = 1;
				A_StartSound("Blackjack/Fire", CHAN_WEAPON, pitch: 0.9);
				A_ZoomRecoil(0.995);
				A_MuzzleClimb(-frandom(0.2, 0.24), -frandom(0.30, 0.36), -frandom(0.2, 0.24),-frandom(0.30, 0.36));
				A_Light1();
			}
			BJKG A 2
			{
				if (invoker.WeaponStatus[BJProp_ChamberPrimary] == 1)
				{
					A_SpawnItemEx("HDSpent355", cos(pitch) * 10, 0, height - 10 - sin(pitch) * 10, vel.x, vel.y, vel.z, 0, SXF_ABSOLUTEMOMENTUM | SXF_NOCHECKPOSITION | SXF_TRANSFERPITCH);
					invoker.WeaponStatus[BJProp_ChamberPrimary] = 0;
				}

				if (invoker.WeaponStatus[BJProp_MagPrimary] <= 0)
				{
					SetWeaponState("Nope");
				}
				else
				{
					A_Light0();
					invoker.WeaponStatus[BJProp_ChamberPrimary] = 2;
					invoker.WeaponStatus[BJProp_MagPrimary]--;
				}
			}
			Goto Ready;

		AltFire:
			BJKG A 1
			{
				if (invoker.WeaponStatus[BJProp_ChamberSecondary] < 2)
				{
					invoker.WeaponStatus[BJProp_LoadType] = 2;
					SetWeaponState("ChamberManual");
					return;
				}
				else
				{
					SetWeaponState("RealAltFire");
					return;
				}
			}
			Goto Nope;
		RealAltFire:
			BJKF A 2 Offset(0, 35)
			{
				Hunter.Fire(self, 3);
				A_AlertMonsters();
				invoker.WeaponStatus[BJProp_ChamberSecondary] = 1;
				A_StartSound("Blackjack/AltFire", CHAN_WEAPON);
				A_ZoomRecoil(0.995);
				A_MuzzleClimb(-frandom(1, 1.2), -frandom(1.5, 2.0), -frandom(1, 1.2), -frandom(1.5, 2.0));
				A_Light1();
			}
			BJKG A 0
			{
				if (invoker.WeaponStatus[BJProp_ChamberSecondary] == 1)
				{
					A_SpawnItemEx("HDSpentShell", cos(pitch) * 8, 0, height - 7 - sin(pitch) * 8, vel.x + cos(pitch) * cos(angle - random(86, 90)) * 5, vel.y + cos(pitch) * sin(angle - random(86, 90)) * 5, vel.z + sin(pitch) * random(4, 6), 0, SXF_ABSOLUTEMOMENTUM | SXF_NOCHECKPOSITION | SXF_TRANSFERPITCH);
					invoker.WeaponStatus[BJProp_ChamberSecondary] = 0;
				}

				if (invoker.WeaponStatus[BJProp_MagSecondary] <= 0)
				{
					SetWeaponState("Nope");
				}
				else
				{
					A_Light0();
					invoker.WeaponStatus[BJProp_ChamberSecondary] = 2;
					invoker.WeaponStatus[BJProp_MagSecondary]--;
				}
			}
		AltHold:
			BJKG A 1;
			BJKG A 0 A_Refire();
			Goto Ready;

		Unload:
			BJKG A 0
			{
				invoker.WeaponStatus[BJProp_Flags] |= BJF_JustUnload;
				invoker.WeaponStatus[BJProp_LoadType] = !PressingFiremode() ? 1 : 2;
				if (!PressingFiremode() && invoker.WeaponStatus[BJProp_MagPrimary] >= 0 || PressingFiremode() && invoker.WeaponStatus[BJProp_MagSecondary] >= 0)
				{
					SetWeaponState("UnMag");
				}
				else if (!PressingFiremode() && invoker.WeaponStatus[BJProp_ChamberPrimary] > 0 || PressingFiremode() && invoker.WeaponStatus[BJProp_ChamberSecondary] > 0)
				{
					SetWeaponState("UnloadChamber");
				}
			}
			Goto Nope;
		UnloadChamber:
			BJKG A 1 A_JumpIf(invoker.WeaponStatus[BJProp_LoadType] == 1 && invoker.WeaponStatus[BJProp_ChamberPrimary] == 0 || invoker.WeaponStatus[BJProp_LoadType] == 2 && invoker.WeaponStatus[BJProp_ChamberSecondary] == 0, "Nope");
			BJKG A 4 Offset(2, 34)
			{
				A_StartSound("Blackjack/BoltPull", 8);
			}
			BJKG A 8 Offset(1, 36)
			{
				if (invoker.WeaponStatus[BJProp_LoadType] == 1)
				{
					class<Actor> Which = invoker.WeaponStatus[BJProp_ChamberPrimary] > 1 ? "HDRevolverAmmo" : "HDSpent355";
					A_SpawnItemEx(Which, cos(pitch) * 10, 0, height - 8 - sin(pitch) * 10, vel.x, vel.y, vel.z, 0, SXF_ABSOLUTEMOMENTUM | SXF_NOCHECKPOSITION | SXF_TRANSFERPITCH);
					invoker.WeaponStatus[BJProp_ChamberPrimary] = 0;
				}
				else if (invoker.WeaponStatus[BJProp_LoadType] == 2)
				{
					class<Actor> Which = invoker.WeaponStatus[BJProp_ChamberSecondary] > 1 ? "HDShellAmmo" : "HDSpentShell";
					A_SpawnItemEx(Which, cos(pitch) * 8, 0, height - 7 - sin(pitch) * 8, vel.x + cos(pitch) * cos(angle - random(86, 90)) * 5, vel.y + cos(pitch) * sin(angle - random(86, 90)) * 5, vel.z + sin(pitch) * random(4, 6), 0, SXF_ABSOLUTEMOMENTUM | SXF_NOCHECKPOSITION | SXF_TRANSFERPITCH);
					invoker.WeaponStatus[BJProp_ChamberSecondary] = 0;
				}
			}
			BJKG A 2 Offset(0, 34);
			Goto ReadyEnd;

		Reload:
		AltReload:
			BJKG A 0
			{
				invoker.WeaponStatus[BJProp_Flags] &= ~BJF_JustUnload;
				if (!PressingAltReload() && invoker.WeaponStatus[BJProp_MagPrimary] >= HDBlackjackMag355.MagCapacity || PressingAltReload() && invoker.WeaponStatus[BJProp_MagSecondary] >= HDBlackjackMagShells.MagCapacity)
				{
					SetWeaponState("Nope");
				}
				else if (PressingUse())
				{
					if (!PressingAltReload() && invoker.WeaponStatus[BJProp_MagPrimary] <= 0 && CheckInventory("HDRevolverAmmo", 1) || PressingAltReload() && invoker.WeaponStatus[BJProp_MagSecondary] <= 0 && CheckInventory("HDShellAmmo", 1))
					{
						SetWeaponState("LoadChamber");
					}
					else
					{
						SetWeaponState("Nope");
					}
				}
				invoker.WeaponStatus[BJProp_LoadType] = !PressingAltReload() ? 1 : 2;
			}
			Goto UnMag;
		LoadChamber:
			BJKG A 0 A_JumpIf(!PressingAltReload() && invoker.WeaponStatus[BJProp_ChamberPrimary] > 0 || PressingAltReload() && invoker.WeaponStatus[BJProp_ChamberSecondary] > 0, "Nope");
			BJKG A 0 A_JumpIf(!PressingAltReload() && !CheckInventory("HDRevolverAmmo", 1) || PressingAltReload() && !CheckInventory("HDShellAmmo", 1), "Nope");
			BJKG A 1 Offset(0, 34) A_StartSound("weapons/pocket", 9);
			BJKG A 1 Offset(2, 36);
			BJKG A 1 Offset(2, 44);
			BJKG A 1 Offset(5, 54);
			BJKG A 2 Offset(7, 60);
			BJKG A 6 Offset(8, 70);
			BJKG A 5 Offset(8, 77)
			{
				if (invoker.WeaponStatus[BJProp_LoadType] == 1 && CheckInventory("HDRevolverAmmo", 1))
				{
					A_TakeInventory("HDRevolverAmmo", 1, TIF_NOTAKEINFINITE);
					invoker.WeaponStatus[BJProp_ChamberPrimary] = 2;
					A_StartSound("Blackjack/ChamberQuick", 8);
				}
				else if (invoker.WeaponStatus[BJProp_LoadType] == 2 && CheckInventory("HDShellAmmo", 1))
				{
					A_TakeInventory("HDShellAmmo", 1, TIF_NOTAKEINFINITE);
					invoker.WeaponStatus[BJProp_ChamberSecondary] = 2;
					A_StartSound("Blackjack/ChamberQuick", 8);
				}
			}
			BJKG A 3 Offset(9, 74);
			BJKG A 2 Offset(5, 70);
			BJKG A 1 Offset(5, 64);
			BJKG A 1 Offset(5, 52);
			BJKG A 1 Offset(5, 42);
			BJKG A 1 Offset(2, 36);
			BJKG A 2 Offset(0, 34);
			Goto Nope;

		UnMag:
			BJKG A 2 Offset(0, 34);
			BJKG A 2 Offset(5, 38);
			BJKG A 2 Offset(10, 42);
			BJKG A 4 Offset(20, 46)
			{
				A_StartSound("Blackjack/MagOut", 8);
				A_MuzzleClimb(0.3, 0.4);
			}
			BJKG A 2 Offset(26, 52) A_MuzzleClimb(0.3, 0.4);
			BJKG A 2 Offset(26, 54) A_MuzzleClimb(0.3, 0.4);
			BJKG A 0
			{
				if (invoker.WeaponStatus[BJProp_LoadType] == 1)
				{
					int MagAmount = invoker.WeaponStatus[BJProp_MagPrimary];
					if (MagAmount == -1)
					{
						SetWeaponState("MagOut");
						return;
					}

					invoker.WeaponStatus[BJProp_MagPrimary] = -1;
					if ((!PressingUnload() && !PressingReload()) || A_JumpIfInventory("HDBlackjackMag355", 0, "Null"))
					{
						HDMagAmmo.SpawnMag(self, "HDBlackjackMag355", MagAmount);
						SetWeaponState("MagOut");
					}
					else
					{
						HDMagAmmo.GiveMag(self, "HDBlackjackMag355", MagAmount);
						A_StartSound("weapons/pocket", 9);
						SetWeaponState("PocketMag");
					}
				}
				else if (invoker.WeaponStatus[BJProp_LoadType] == 2)
				{
					int MagAmount = invoker.WeaponStatus[BJProp_MagSecondary];
					if (MagAmount == -1)
					{
						SetWeaponState("MagOut");
						return;
					}

					invoker.WeaponStatus[BJProp_MagSecondary] = -1;
					if ((!PressingUnload() && !PressingAltReload()) || A_JumpIfInventory("HDBlackjackMagShells", 0, "Null"))
					{
						HDMagAmmo.SpawnMag(self, "HDBlackjackMagShells", MagAmount);
						SetWeaponState("MagOut");
					}
					else
					{
						HDMagAmmo.GiveMag(self, "HDBlackjackMagShells", MagAmount);
						A_StartSound("weapons/pocket", 9);
						SetWeaponState("PocketMag");
					}
				}
			}
		PocketMag:
			BJKG AAAAAA 5 Offset(26, 54) A_MuzzleClimb(frandom(0.2, -0.8),frandom(-0.2, 0.4));
		MagOut:
			BJKG A 0
			{
				if (invoker.WeaponStatus[BJProp_Flags] & BJF_JustUnload)
				{
					SetWeaponState("ReloadEnd");
				}
			}
		LoadMag:
			BJKG A 0 A_StartSound("weapons/pocket", 9);
			BJKG A 6 offset(34, 54) A_MuzzleClimb(frandom(0.2, -0.8), frandom(-0.2, 0.4));
			BJKG A 7 offset(34, 52) A_MuzzleClimb(frandom(0.2, -0.8), frandom(-0.2, 0.4));
			BJKG A 10 offset(32, 50);
			BJKG A 3 offset(32, 49)
			{
				if (invoker.WeaponStatus[BJProp_LoadType] == 1)
				{
					let Mag = HDMagAmmo(FindInventory("HDBlackjackMag355"));
					if (Mag)
					{
						invoker.WeaponStatus[BJProp_MagPrimary] = Mag.TakeMag(true);
						A_StartSound("Blackjack/MagIn", 8, CHANF_OVERLAP);
					}
				}
				else if (invoker.WeaponStatus[BJProp_LoadType] == 2)
				{
					let Mag = HDMagAmmo(FindInventory("HDBlackjackMagShells"));
					if (Mag)
					{
						invoker.WeaponStatus[BJProp_MagSecondary] = Mag.TakeMag(true);
						A_StartSound("Blackjack/MagIn", 8, CHANF_OVERLAP);
					}
				}
			}
			Goto ReloadEnd;

		ReloadEnd:
			BJKG A 4 Offset(30, 52);
			BJKG A 3 Offset(20, 46);
			BJKG A 2 Offset(10, 42);
			BJKG A 2 Offset(5, 38);
			BJKG A 1 Offset(0, 34);
			Goto ChamberManual;

		ChamberManual:
			BJKG A 0 A_JumpIf(invoker.WeaponStatus[BJProp_LoadType] == 1 && (invoker.WeaponStatus[BJProp_MagPrimary] <= 0 || invoker.WeaponStatus[BJProp_ChamberPrimary] == 2) || invoker.WeaponStatus[BJProp_LoadType] == 2 && (invoker.WeaponStatus[BJProp_MagSecondary] <= 0 || invoker.WeaponStatus[BJProp_ChamberSecondary] == 2), "Nope");
			BJKG A 2 Offset(2, 34);
			BJKG A 4 Offset(3, 38);
			BJKG A 5 Offset(4, 44)
			{
				A_StartSound("Blackjack/BoltPull", 8, CHANF_OVERLAP);
				if (invoker.WeaponStatus[BJProp_LoadType] == 1)
				{
					if (invoker.WeaponStatus[BJProp_ChamberPrimary] == 1)
					{
						A_SpawnItemEx("HDSpent355", cos(pitch) * 10, 0, height - 10 - sin(pitch) * 10, vel.x, vel.y, vel.z, 0, SXF_ABSOLUTEMOMENTUM | SXF_NOCHECKPOSITION | SXF_TRANSFERPITCH);
						invoker.WeaponStatus[BJProp_ChamberPrimary] = 0;
					}

					invoker.WeaponStatus[BJProp_MagPrimary]--;
					invoker.WeaponStatus[BJProp_ChamberPrimary] = 2;
				}
				else if (invoker.WeaponStatus[BJProp_LoadType] == 2)
				{
					if (invoker.WeaponStatus[BJProp_ChamberSecondary] == 1)
					{
						A_SpawnItemEx("HDSpentShell", cos(pitch) * 8, 0, height - 7 - sin(pitch) * 8, vel.x + cos(pitch) * cos(angle - random(86, 90)) * 5, vel.y + cos(pitch) * sin(angle - random(86, 90)) * 5, vel.z + sin(pitch) * random(4, 6), 0, SXF_ABSOLUTEMOMENTUM | SXF_NOCHECKPOSITION | SXF_TRANSFERPITCH);
						invoker.WeaponStatus[BJProp_ChamberSecondary] = 0;
					}

					invoker.WeaponStatus[BJProp_MagSecondary]--;
					invoker.WeaponStatus[BJProp_ChamberSecondary] = 2;
				}

				A_WeaponBusy();
			}
			BJKG A 2 Offset(3, 38);
			BJKG A 2 Offset(2, 34);
			BJKG A 2 Offset(0, 32);
			Goto Nope;
	}
}

class BlackjackRandom : IdleDummy
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SpawnItemEx("HDBlackjackMag355", -3,flags: SXF_NOCHECKPOSITION);
				A_SpawnItemEx("HDBlackjackMagShells", 6,flags: SXF_NOCHECKPOSITION);
				let wpn = HDBlackjack(Spawn("HDBlackjack", pos, ALLOW_REPLACE));
				if (!wpn)
				{
					return;
				}

				wpn.special = special;
				for (int i = 0; i < 5; ++i)
				{
					wpn.Args[i] = Args[i];
				}

				wpn.InitializeWepStats(false);
			}
			Stop;
	}
}


class HDBlackjackMag355 : HDMagAmmo
{
	override string, string, name, double GetMagSprite(int thismagamt)
	{
		return (thismagamt > 0) ? "BJM3A0" : "BJM3B0", "PRNDA0", "HDRevolverAmmo", 1.0;
	}

	override void GetItemsThatUseThis()
	{
		ItemsThatUseThis.Push("HDBlackjack");
	}

	const MagCapacity = 25;
	const EncMagEmpty = 5;
	const EncMagLoaded = EncMagEmpty * 0.9;

	Default
	{
		HDMagAmmo.MaxPerUnit MagCapacity;
		HDMagAmmo.InsertTime 6;
		HDMagAmmo.ExtractTime 4;
		HDMagAmmo.RoundType "HDRevolverAmmo";
		HDMagAmmo.RoundBulk ENC_355_LOADED;
		HDMagAmmo.MagBulk EncMagEmpty;
		Tag "Blackjack .355 magazine";
		Inventory.PickupMessage "Picked up a 35-round Blackjack .355 magazine.";
		HDPickup.RefId "bm3";
		Scale 0.7;
	}

	States
	{
		Spawn:
			BJM3 A -1;
			Stop;
		SpawnEmpty:
			BJM3 B -1
			{
				bROLLSPRITE = true;
				bROLLCENTER = true;
				roll = randompick(0, 0, 0, 0, 2, 2, 2, 2, 1, 3) * 90;
			}
			Stop;
	}
}

class HDBlackjackMagShells : HDMagAmmo
{
	override string, string, name, double GetMagSprite(int thismagamt)
	{
		return (thismagamt > 0) ? "BJMSA0" : "BJMSB0", "SHELA0", "HDShellAmmo", 1.0;
	}

	override void GetItemsThatUseThis()
	{
		ItemsThatUseThis.Push("HDBlackjack");
	}

	const MagCapacity = 5;
	const EncMagEmpty = 7;
	const EncMagLoaded = EncMagEmpty * 0.9;

	Default
	{
		HDMagAmmo.MaxPerUnit MagCapacity;
		HDMagAmmo.InsertTime 6;
		HDMagAmmo.ExtractTime 4;
		HDMagAmmo.RoundType "HDShellAmmo";
		HDMagAmmo.RoundBulk ENC_SHELLLOADED;
		HDMagAmmo.MagBulk EncMagEmpty;
		Tag "Blackjack shell magazine";
		Inventory.PickupMessage "Picked up a 5-round Blackjack shell magazine.";
		HDPickup.RefId "bms";
		Scale 0.7;
	}

	States
	{
		Spawn:
			BJMS A -1;
			Stop;
		SpawnEmpty:
			BJMS B -1
			{
				bROLLSPRITE = true;
				bROLLCENTER = true;
				roll = randompick(0, 0, 0, 0, 2, 2, 2, 2, 1, 3) * 90;
			}
			Stop;
	}
}